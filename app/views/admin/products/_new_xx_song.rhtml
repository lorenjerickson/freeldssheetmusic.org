<%=
options = {:action => 'save'}
  if @product.id
    options[:id] = @product
  end
form_tag(options, :multipart => true)
 %>

<div id="left">
<hr/>
  <h1><%= @title %></h1>
<%=link_to 'Back to instructions page', :controller => '/content_nodes', :action => 'show_by_name', :name => 'self-upload' %>

<%= error_messages_for 'product' %>

<div class="padLeft">
   <!-- top right --> <div style="float:right;"><%= submit_tag 'Save this Song', :disable_with => 'Saving...', :class => 'button hundredthirty' %>
</div>

	<div class="padLeft">
<% if have_name %>
		<div class="float" style="padding-left:0px;">
			<%= make_label('Name') %>
			<%= text_field 'product', 'name', :class => 'textInput', :size => 30  %>
		</div>
                <br/>
<div class="padLeft">
  Lyrics (optional):
        <%= text_area 'product', 'lyrics', :rows => 3, :class => 'textArea', :style => 'width:670px;'  %>
<br/>
</div>

<% end %>
		<%= make_label('Song (or your) website URL (like http://somewhere/song_name.html) [optional]') %>
		<div class="float" style="margin-left: 20px">
			<%= text_field 'product', 'original_url', :class => 'textInput', :size => 30  %> <%= "<a href=#{@product.original_url} target=\"_blank\">Visit o_riginal url</a>" if @product.original_url.present? %>
		</div>
                <br/>

	</div>
  
</div>
<br/>

<br/>
<div class="padLeft">
        <%= make_label('Description/song history [optional]:') %>
	<%= text_area 'product', 'description', :rows => 5, :class => 'textArea', :style => 'width:670px;'  %>
</div>

<script type="text/javascript">
<!--
  var PRODUCT = {
    variation_boxes: null,
    original_price: 0,
    set_variation_boxes: function() {
      PRODUCT.variation_boxes = $$("input[name='variation[][price]']");
    },
    // Watches product price box.
    // When value of price changes, it changes price of all variations 
    // that equal the original value.
    change_price: function() {
      var p_input = $('product_price')
      var price = p_input.value;
      PRODUCT.variation_boxes.each(function(box){
        box_price = box.value;
        box_orig = parseFloat(box.getAttribute('original_value'), 10);
        if (box_orig == parseFloat(PRODUCT.original_price,10) || box_orig == 0.0) {
          box.value = price;
        };
      });
      PRODUCT.color_variation_boxes;
    },
    // Marks variation boxes with same price as original,
    // and ones that differ.
    color_variation_boxes: function() {
      var p_input = $('product_price')
      var price = parseFloat(p_input.value,10);
      PRODUCT.variation_boxes.each(function(box){
        box_price = parseFloat(box.value, 10);
        if (price == box_price) {
          box.style.color = '#999999';
          box.style.backgroundColor = '#eee';
        } else {
          box.style.color = '';
          box.style.backgroundColor = '';
        }
      });
    },
    // Shortcut
    set_and_color_boxes: function() {
      PRODUCT.set_variation_boxes();
      PRODUCT.change_price();
      PRODUCT.color_variation_boxes();
      PRODUCT.observe_boxes();
    },
    // Observes variations and recolors them if they differ from the norm.
    // Kind of inefficient scripting wise, but we probably aren't
    // dealing with products that have 100's of variations.
    observe_boxes: function() {
      PRODUCT.variation_boxes.each(function(box){
        Event.observe(box, 'keyup', PRODUCT.color_variation_boxes);
      });
    },
    add_variation_loading: function() {
      $('add_variation_link').hide(); 
      $('add_variation_indicator').show();
    },
    add_variation_complete: function() {
      PRODUCT.set_and_color_boxes();
      PRODUCT.make_variations_sortable();
      $('add_variation_link').show(); 
      $('add_variation_indicator').hide();
    },
    // Creates sortable on the variations container so we can drag/drop them
    make_variations_sortable: function() {
      Sortable.create(
        'variation_container',
        {
          tag: 'div',
          onUpdate: PRODUCT.update_variation_rank
        }
      );
    },
    // Run when variation is dragged / dropped.
    // Updates the hidden input for rank on the variation,
    // which is saved on product save.
    update_variation_rank: function(container) {
      var sort_items = container.select("div.variation.sort_item");
      for (var i=0; i<sort_items.length; i++) {
        variation = sort_items[i];
        rank_box = variation.select("input[name='variation[][variation_rank]']")[0];
        rank_box.value = i;
      }
    },
    // Adds event handlers to variation boxes
    init: function() {
      PRODUCT.original_price = $('product_price').getAttribute('original_value');
      Event.observe($('product_price'), 'keyup', PRODUCT.change_price);
      PRODUCT.set_and_color_boxes();
      PRODUCT.observe_boxes();
      PRODUCT.make_variations_sortable();
    }
  };
  PRODUCT.init();
//-->
</script>

		<!--div class="float">
			<%= make_label('Song Code (auto-filled--you shouldnt have to enter anything here, just leave it blank)') %>
			<%= text_field 'product', 'code', :class => 'textInput', :size => 30 %>
		</div-->

<br>
      <%= make_label('youtube video id (like JW5meKfy3fY) if it has one [optional]') %>
   <div class="float" style="margin-left: 50px">
      <%= text_field 'product', 'youtube_video_id', :class => 'textInput', :size => 30  %>
   </div>
<br/>
<br>

<%= render :partial => 'product_upload' %>
<%= render :partial => 'image_upload' %>
<input type="hidden" name="using_edit_song_easy" value="yep">

<div id="right" style="width: 350px;">
<h1>Describe This Song</h1>


